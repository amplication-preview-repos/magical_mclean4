/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Transcript as PrismaTranscript,
  PolishRequest as PrismaPolishRequest,
  Conversation as PrismaConversation,
} from "@prisma/client";

export class TranscriptServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TranscriptCountArgs, "select">
  ): Promise<number> {
    return this.prisma.transcript.count(args);
  }

  async transcripts(
    args: Prisma.TranscriptFindManyArgs
  ): Promise<PrismaTranscript[]> {
    return this.prisma.transcript.findMany(args);
  }
  async transcript(
    args: Prisma.TranscriptFindUniqueArgs
  ): Promise<PrismaTranscript | null> {
    return this.prisma.transcript.findUnique(args);
  }
  async createTranscript(
    args: Prisma.TranscriptCreateArgs
  ): Promise<PrismaTranscript> {
    return this.prisma.transcript.create(args);
  }
  async updateTranscript(
    args: Prisma.TranscriptUpdateArgs
  ): Promise<PrismaTranscript> {
    return this.prisma.transcript.update(args);
  }
  async deleteTranscript(
    args: Prisma.TranscriptDeleteArgs
  ): Promise<PrismaTranscript> {
    return this.prisma.transcript.delete(args);
  }

  async findPolishRequests(
    parentId: string,
    args: Prisma.PolishRequestFindManyArgs
  ): Promise<PrismaPolishRequest[]> {
    return this.prisma.transcript
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .polishRequests(args);
  }

  async getConversation(parentId: string): Promise<PrismaConversation | null> {
    return this.prisma.transcript
      .findUnique({
        where: { id: parentId },
      })
      .conversation();
  }
}
