/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Transcript } from "./Transcript";
import { TranscriptCountArgs } from "./TranscriptCountArgs";
import { TranscriptFindManyArgs } from "./TranscriptFindManyArgs";
import { TranscriptFindUniqueArgs } from "./TranscriptFindUniqueArgs";
import { CreateTranscriptArgs } from "./CreateTranscriptArgs";
import { UpdateTranscriptArgs } from "./UpdateTranscriptArgs";
import { DeleteTranscriptArgs } from "./DeleteTranscriptArgs";
import { PolishRequestFindManyArgs } from "../../polishRequest/base/PolishRequestFindManyArgs";
import { PolishRequest } from "../../polishRequest/base/PolishRequest";
import { Conversation } from "../../conversation/base/Conversation";
import { TranscriptService } from "../transcript.service";
@graphql.Resolver(() => Transcript)
export class TranscriptResolverBase {
  constructor(protected readonly service: TranscriptService) {}

  async _transcriptsMeta(
    @graphql.Args() args: TranscriptCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Transcript])
  async transcripts(
    @graphql.Args() args: TranscriptFindManyArgs
  ): Promise<Transcript[]> {
    return this.service.transcripts(args);
  }

  @graphql.Query(() => Transcript, { nullable: true })
  async transcript(
    @graphql.Args() args: TranscriptFindUniqueArgs
  ): Promise<Transcript | null> {
    const result = await this.service.transcript(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Transcript)
  async createTranscript(
    @graphql.Args() args: CreateTranscriptArgs
  ): Promise<Transcript> {
    return await this.service.createTranscript({
      ...args,
      data: {
        ...args.data,

        conversation: args.data.conversation
          ? {
              connect: args.data.conversation,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Transcript)
  async updateTranscript(
    @graphql.Args() args: UpdateTranscriptArgs
  ): Promise<Transcript | null> {
    try {
      return await this.service.updateTranscript({
        ...args,
        data: {
          ...args.data,

          conversation: args.data.conversation
            ? {
                connect: args.data.conversation,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Transcript)
  async deleteTranscript(
    @graphql.Args() args: DeleteTranscriptArgs
  ): Promise<Transcript | null> {
    try {
      return await this.service.deleteTranscript(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [PolishRequest], { name: "polishRequests" })
  async findPolishRequests(
    @graphql.Parent() parent: Transcript,
    @graphql.Args() args: PolishRequestFindManyArgs
  ): Promise<PolishRequest[]> {
    const results = await this.service.findPolishRequests(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Conversation, {
    nullable: true,
    name: "conversation",
  })
  async getConversation(
    @graphql.Parent() parent: Transcript
  ): Promise<Conversation | null> {
    const result = await this.service.getConversation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
