/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TranscriptService } from "../transcript.service";
import { TranscriptCreateInput } from "./TranscriptCreateInput";
import { Transcript } from "./Transcript";
import { TranscriptFindManyArgs } from "./TranscriptFindManyArgs";
import { TranscriptWhereUniqueInput } from "./TranscriptWhereUniqueInput";
import { TranscriptUpdateInput } from "./TranscriptUpdateInput";
import { PolishRequestFindManyArgs } from "../../polishRequest/base/PolishRequestFindManyArgs";
import { PolishRequest } from "../../polishRequest/base/PolishRequest";
import { PolishRequestWhereUniqueInput } from "../../polishRequest/base/PolishRequestWhereUniqueInput";

export class TranscriptControllerBase {
  constructor(protected readonly service: TranscriptService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Transcript })
  async createTranscript(
    @common.Body() data: TranscriptCreateInput
  ): Promise<Transcript> {
    return await this.service.createTranscript({
      data: {
        ...data,

        conversation: data.conversation
          ? {
              connect: data.conversation,
            }
          : undefined,
      },
      select: {
        conversation: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        speaker: true,
        text: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Transcript] })
  @ApiNestedQuery(TranscriptFindManyArgs)
  async transcripts(@common.Req() request: Request): Promise<Transcript[]> {
    const args = plainToClass(TranscriptFindManyArgs, request.query);
    return this.service.transcripts({
      ...args,
      select: {
        conversation: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        speaker: true,
        text: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Transcript })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async transcript(
    @common.Param() params: TranscriptWhereUniqueInput
  ): Promise<Transcript | null> {
    const result = await this.service.transcript({
      where: params,
      select: {
        conversation: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        speaker: true,
        text: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Transcript })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTranscript(
    @common.Param() params: TranscriptWhereUniqueInput,
    @common.Body() data: TranscriptUpdateInput
  ): Promise<Transcript | null> {
    try {
      return await this.service.updateTranscript({
        where: params,
        data: {
          ...data,

          conversation: data.conversation
            ? {
                connect: data.conversation,
              }
            : undefined,
        },
        select: {
          conversation: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          speaker: true,
          text: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Transcript })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTranscript(
    @common.Param() params: TranscriptWhereUniqueInput
  ): Promise<Transcript | null> {
    try {
      return await this.service.deleteTranscript({
        where: params,
        select: {
          conversation: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          speaker: true,
          text: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/polishRequests")
  @ApiNestedQuery(PolishRequestFindManyArgs)
  async findPolishRequests(
    @common.Req() request: Request,
    @common.Param() params: TranscriptWhereUniqueInput
  ): Promise<PolishRequest[]> {
    const query = plainToClass(PolishRequestFindManyArgs, request.query);
    const results = await this.service.findPolishRequests(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        result: true,
        status: true,

        transcript: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/polishRequests")
  async connectPolishRequests(
    @common.Param() params: TranscriptWhereUniqueInput,
    @common.Body() body: PolishRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      polishRequests: {
        connect: body,
      },
    };
    await this.service.updateTranscript({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/polishRequests")
  async updatePolishRequests(
    @common.Param() params: TranscriptWhereUniqueInput,
    @common.Body() body: PolishRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      polishRequests: {
        set: body,
      },
    };
    await this.service.updateTranscript({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/polishRequests")
  async disconnectPolishRequests(
    @common.Param() params: TranscriptWhereUniqueInput,
    @common.Body() body: PolishRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      polishRequests: {
        disconnect: body,
      },
    };
    await this.service.updateTranscript({
      where: params,
      data,
      select: { id: true },
    });
  }
}
