/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PolishRequest as PrismaPolishRequest,
  Transcript as PrismaTranscript,
} from "@prisma/client";

import { PolishRequestCreateInput } from "./PolishRequestCreateInput";
import { PolishRequest } from "./PolishRequest";

export class PolishRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PolishRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.polishRequest.count(args);
  }

  async polishRequests(
    args: Prisma.PolishRequestFindManyArgs
  ): Promise<PrismaPolishRequest[]> {
    return this.prisma.polishRequest.findMany(args);
  }
  async polishRequest(
    args: Prisma.PolishRequestFindUniqueArgs
  ): Promise<PrismaPolishRequest | null> {
    return this.prisma.polishRequest.findUnique(args);
  }
  async createPolishRequest(
    args: Prisma.PolishRequestCreateArgs
  ): Promise<PrismaPolishRequest> {
    return this.prisma.polishRequest.create(args);
  }
  async updatePolishRequest(
    args: Prisma.PolishRequestUpdateArgs
  ): Promise<PrismaPolishRequest> {
    return this.prisma.polishRequest.update(args);
  }
  async deletePolishRequest(
    args: Prisma.PolishRequestDeleteArgs
  ): Promise<PrismaPolishRequest> {
    return this.prisma.polishRequest.delete(args);
  }

  async getTranscript(parentId: string): Promise<PrismaTranscript | null> {
    return this.prisma.polishRequest
      .findUnique({
        where: { id: parentId },
      })
      .transcript();
  }
  async HandleRequestPolish(
    args: PolishRequestCreateInput
  ): Promise<PolishRequest> {
    throw new Error("Not implemented");
  }
  async RequestPolish(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
