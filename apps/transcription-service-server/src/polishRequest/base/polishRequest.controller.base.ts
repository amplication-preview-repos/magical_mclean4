/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PolishRequestService } from "../polishRequest.service";
import { PolishRequestCreateInput } from "./PolishRequestCreateInput";
import { PolishRequest } from "./PolishRequest";
import { PolishRequestFindManyArgs } from "./PolishRequestFindManyArgs";
import { PolishRequestWhereUniqueInput } from "./PolishRequestWhereUniqueInput";
import { PolishRequestUpdateInput } from "./PolishRequestUpdateInput";

export class PolishRequestControllerBase {
  constructor(protected readonly service: PolishRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PolishRequest })
  async createPolishRequest(
    @common.Body() data: PolishRequestCreateInput
  ): Promise<PolishRequest> {
    return await this.service.createPolishRequest({
      data: {
        ...data,

        transcript: data.transcript
          ? {
              connect: data.transcript,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        result: true,
        status: true,

        transcript: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PolishRequest] })
  @ApiNestedQuery(PolishRequestFindManyArgs)
  async polishRequests(
    @common.Req() request: Request
  ): Promise<PolishRequest[]> {
    const args = plainToClass(PolishRequestFindManyArgs, request.query);
    return this.service.polishRequests({
      ...args,
      select: {
        createdAt: true,
        id: true,
        result: true,
        status: true,

        transcript: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PolishRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async polishRequest(
    @common.Param() params: PolishRequestWhereUniqueInput
  ): Promise<PolishRequest | null> {
    const result = await this.service.polishRequest({
      where: params,
      select: {
        createdAt: true,
        id: true,
        result: true,
        status: true,

        transcript: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PolishRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePolishRequest(
    @common.Param() params: PolishRequestWhereUniqueInput,
    @common.Body() data: PolishRequestUpdateInput
  ): Promise<PolishRequest | null> {
    try {
      return await this.service.updatePolishRequest({
        where: params,
        data: {
          ...data,

          transcript: data.transcript
            ? {
                connect: data.transcript,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          result: true,
          status: true,

          transcript: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PolishRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePolishRequest(
    @common.Param() params: PolishRequestWhereUniqueInput
  ): Promise<PolishRequest | null> {
    try {
      return await this.service.deletePolishRequest({
        where: params,
        select: {
          createdAt: true,
          id: true,
          result: true,
          status: true,

          transcript: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/handlePolish")
  @swagger.ApiOkResponse({
    type: PolishRequest,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async HandleRequestPolish(
    @common.Body()
    body: string
  ): Promise<PolishRequest> {
    return this.service.HandleRequestPolish(body);
  }

  @common.Get("/:id/request-polish")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async RequestPolish(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.RequestPolish(body);
  }
}
