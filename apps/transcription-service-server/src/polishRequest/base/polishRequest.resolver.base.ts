/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PolishRequest } from "./PolishRequest";
import { PolishRequestCountArgs } from "./PolishRequestCountArgs";
import { PolishRequestFindManyArgs } from "./PolishRequestFindManyArgs";
import { PolishRequestFindUniqueArgs } from "./PolishRequestFindUniqueArgs";
import { CreatePolishRequestArgs } from "./CreatePolishRequestArgs";
import { UpdatePolishRequestArgs } from "./UpdatePolishRequestArgs";
import { DeletePolishRequestArgs } from "./DeletePolishRequestArgs";
import { Transcript } from "../../transcript/base/Transcript";
import { PolishRequestCreateInput } from "./PolishRequestCreateInput";
import { PolishRequestService } from "../polishRequest.service";
@graphql.Resolver(() => PolishRequest)
export class PolishRequestResolverBase {
  constructor(protected readonly service: PolishRequestService) {}

  async _polishRequestsMeta(
    @graphql.Args() args: PolishRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PolishRequest])
  async polishRequests(
    @graphql.Args() args: PolishRequestFindManyArgs
  ): Promise<PolishRequest[]> {
    return this.service.polishRequests(args);
  }

  @graphql.Query(() => PolishRequest, { nullable: true })
  async polishRequest(
    @graphql.Args() args: PolishRequestFindUniqueArgs
  ): Promise<PolishRequest | null> {
    const result = await this.service.polishRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PolishRequest)
  async createPolishRequest(
    @graphql.Args() args: CreatePolishRequestArgs
  ): Promise<PolishRequest> {
    return await this.service.createPolishRequest({
      ...args,
      data: {
        ...args.data,

        transcript: args.data.transcript
          ? {
              connect: args.data.transcript,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PolishRequest)
  async updatePolishRequest(
    @graphql.Args() args: UpdatePolishRequestArgs
  ): Promise<PolishRequest | null> {
    try {
      return await this.service.updatePolishRequest({
        ...args,
        data: {
          ...args.data,

          transcript: args.data.transcript
            ? {
                connect: args.data.transcript,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PolishRequest)
  async deletePolishRequest(
    @graphql.Args() args: DeletePolishRequestArgs
  ): Promise<PolishRequest | null> {
    try {
      return await this.service.deletePolishRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Transcript, {
    nullable: true,
    name: "transcript",
  })
  async getTranscript(
    @graphql.Parent() parent: PolishRequest
  ): Promise<Transcript | null> {
    const result = await this.service.getTranscript(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PolishRequest)
  async HandleRequestPolish(
    @graphql.Args()
    args: PolishRequestCreateInput
  ): Promise<PolishRequest> {
    return this.service.HandleRequestPolish(args);
  }

  @graphql.Query(() => String)
  async RequestPolish(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.RequestPolish(args);
  }
}
